Package compilador;

Helpers

	all 			= [0 .. 0xffff];
	letter 			= ['a' .. 'z'] | ['A' .. 'Z'];
	init_var 		= letter | '_';
	cr 				= 13;
	lf 				= 10;
	tab 			= 9;
	eol 			= cr lf | cr | lf;
	digit 			= ['0' .. '9'];
	blank 			= ' ' | cr | lf | tab;
	char			= [all - '''];
	comment_line	= '/''/'[all - [lf + cr]]* eol;

States 

	normal, comment;

Tokens

		{normal} programa 		= 'programa';
		{normal} inicio 		= 'inicio';
		{normal} fim 			= 'fim.';
		{normal} enquanto 		= 'enquanto';
		{normal} fim_enquanto	= 'fim enquanto';
		{normal} se 			= 'se';
		{normal} entao 			= 'entao';
		{normal} senao 			= 'senao';
		{normal} fim_se 		= 'fim se';
		{normal} para 			= 'para';
		{normal} de				= 'de';
		{normal} passo			= 'passo';
		{normal} fim_para 		= 'fim para';
		{normal} ate 			= 'ate';
		{normal} faca 			= 'faca';
		{normal} repita 		= 'repita';
		{normal} avalie			= 'avalie';
		{normal} caso 			= 'caso';
		{normal} fim_avalie 	= 'fim avalie';
		{normal} tipo 			= 'inteiro' | 'real' | 'caracter';

		{normal} mais 			= '+';
		{normal} menos 			= '-';
		{normal} barra 			= '/';
		{normal} estrela 		= '*';
		{normal} par_d 			= '(';
		{normal} par_e 			= ')';
		{normal} col_d			= '[';
		{normal} col_e			= ']';
		{normal} igual			= '=';
		{normal} diferente		= '<>';
		{normal} maior			= '>';
		{normal} menor			= '<';
		{normal} menor_igual	= '<=';
		{normal} maior_igual	= '>=';
		{normal} e				= 'e';
		{normal} ou				= 'ou';
		{normal} xor			= 'xor';
		{normal} nao			= 'nao';
		{normal} atribuicao		= ':=';

		{normal} escreva		= 'escreva';
		{normal} leia			= 'leia';

		{normal} dois_pontos 	= ':';
		{normal} semicolon	 	= ';';
		{normal} ponto 			= '.';
		{normal} virgula		= ',';

		{normal} comments		= comment_line;

		{normal} id 			= init_var (letter | digit | '_')*;
		{normal} number		 	= '-'? (digit+);
		{normal} number_real 	= '-'? digit+ '.' digit+;
		{normal} string			= ''' char* ''';
		{normal} blank 			= blank+;

		{normal->comment, comment} comment = '/*';

		{comment} comment_end = '*/'; 
		{comment} comment_body = [all - ['*' + '/']]*; 
		{comment} star = '*'; 
		{comment} slash = '/';
		{comment} comment_line		= comment_line;

Ignored Tokens

	blank, comments, comment;

Productions

	start {-> start}				= programa id inicio declaracao* comando* fim {-> New start(programa, id, inicio, [declaracao], [comando], fim) };
	identificador{->identificador} 	= {id} id {-> New identificador.id(id)}
									| {id_var} id col_d number col_e {-> New identificador.id_var(id, col_d, number, col_e)};
	var	 							= {id} identificador var_tail {-> New var.id(identificador, var_tail)};
	var_tail						= {tail} virgula var {-> New var_tail.tail(virgula, var)}
									| {empty};

	valor{-> valor}					= {string} string {-> New valor.string(string)}
									| {number} number {-> New valor.number(number)}
									| {number_real} number_real {-> New valor.number_real(number_real)};

	declaracao{-> declaracao}		= {declar} tipo dois_pontos var semicolon { -> New declaracao.declar(tipo, dois_pontos, var, semicolon)};

	expressao{-> expressao}			= {mais} termo mais expressao {-> New expressao.mais(termo.expressao, expressao)}
									| {menos} termo menos expressao{-> New expressao.menos(termo.expressao, expressao)}
									| {negacao} menos expressao{-> New expressao.negacao(expressao)}
									| {termo} termo {-> termo.expressao};

	termo {->expressao}				= {mul} fator estrela termo {-> New expressao.mul(fator.expressao, termo.expressao)}
									| {div} fator barra termo {-> New expressao.div(fator.expressao, termo.expressao)}
									| {fator} fator {-> fator.expressao};

	fator{-> expressao}				= {valor} valor {-> New expressao.valor(valor)}
									| {id} identificador {-> New expressao.id(identificador)}
									| {parenteses} par_d expressao par_e {-> New expressao.parenteses(expressao)};

	expressao_logica{->expressao_logica}	= {e} termo_logico e expressao_logica {-> New expressao_logica.e(termo_logico.expressao_logica, expressao_logica)}
											| {ou} termo_logico ou expressao_logica {-> New expressao_logica.ou(termo_logico.expressao_logica, expressao_logica)}
											| {xor} termo_logico xor expressao_logica {-> New expressao_logica.xor(termo_logico.expressao_logica, expressao_logica)}
											| {negacao} nao expressao_logica {-> New expressao_logica.nao(expressao_logica)}
											| {termo} termo_logico {-> termo_logico.expressao_logica};

	termo_logico{->expressao_logica}		= {relacional} expressao op_rel termo_logico {-> New expressao_logica.relacional(expressao, op_rel, termo_logico.expressao_logica)}
											| {fator} fator_logico {-> fator_logico.expressao_logica};

	fator_logico{-> expressao_logica}		= {parenteses} par_d expressao_logica par_e {-> New expressao_logica.parenteses(expressao_logica)}
											| {operacao} [esq]:expressao op_rel [dir]:expressao {-> New expressao_logica.operacao(esq.expressao, op_rel,dir.expressao)};

	op_rel	{->op_rel}						= {igual} igual {-> New op_rel.igual(igual)}
											| {diferente} diferente {-> New op_rel.diferente(diferente)}
											| {maior} maior {-> New op_rel.maior(maior)}
											| {menor} menor {-> New op_rel.menor(menor)}
											| {maior_igual} maior_igual {-> New op_rel.maior_igual(maior_igual)}
											| {menor_igual} menor_igual {-> New op_rel.menor_igual(menor_igual)};

	exp	{-> exp}							= {exp} expressao exp_tail {-> New exp.exp(expressao, exp_tail)};
	exp_tail {-> exp_tail}					= {tail} virgula exp {-> New exp_tail.tail(virgula, exp)}
											| {empty};

	comando	{-> comando}					= {atribuicao} identificador atribuicao expressao semicolon {-> New comando.atribuicao(identificador, expressao)}
											| {escreva}  escreva par_d exp par_e semicolon {-> New comando.escreva(exp)}
											| {leia} leia par_d var par_e semicolon {-> New comando.leia(var)}
											| {avalie} avalie par_d expressao par_e caso_stt* senao_caso_stt? fim_avalie semicolon {-> New comando.avalie(expressao)}
											| {para} para identificador de [inicial]:number ate [final]:number faca comando+ fim_para semicolon {-> New comando.para(identificador)}
											| {para_passo} para identificador de [inicial]:number passo [passos]:number ate [final]:number faca comando+ fim_para semicolon {-> New comando.para_passo(identificador)}
											| {se} se par_d expressao_logica par_e entao comando+ senao_statement? fim_se semicolon {-> New comando.se(expressao_logica)}
											| {repita} repita comando+ ate par_d expressao_logica par_e semicolon {-> New comando.repita(expressao_logica)}
											| {enquanto} enquanto par_d expressao_logica par_e faca comando+ fim_enquanto semicolon {-> New comando.enquanto(expressao_logica)};

	caso_stt								= caso valor dois_pontos comando+;
	senao_caso_stt							= senao dois_pontos comando+;
	senao_statement							= senao comando+;

Abstract Syntax Tree

	start							= programa id inicio declaracao* comando* fim;
	identificador 					= {id} id 
									| {id_var} id col_d number col_e;
	var 							= {id} identificador var_tail;
	var_tail						= {tail} virgula var
									| {empty};

	valor							= {string} string
									| {number} number
									| {number_real} number_real;

	declaracao						= {declar} tipo dois_pontos var semicolon;

	expressao						= {mais} [esq]:expressao [dir]:expressao
									| {menos} [esq]:expressao [dir]:expressao
									| {mul} [esq]:expressao [dir]:expressao
									| {div} [esq]:expressao [dir]:expressao
									| {negacao} expressao
									| {valor} valor
									| {id} identificador
									| {parenteses} expressao;

	expressao_logica				= {e} [esq]:expressao_logica [dir]:expressao_logica
									| {ou} [esq]:expressao_logica [dir]:expressao_logica
									| {xor} [esq]:expressao_logica [dir]:expressao_logica
									| {nao} expressao_logica
									| {relacional} expressao op_rel expressao_logica
									| {parenteses} expressao_logica
									| {operacao} [esq]:expressao op_rel [dir]:expressao;

	op_rel							= {igual} igual
									| {diferente} diferente
									| {maior} maior
									| {menor} menor
									| {maior_igual} maior_igual
									| {menor_igual} menor_igual;

	exp								= {exp} expressao exp_tail;
	exp_tail						= {tail} virgula exp
									| {empty};

	comando							= {atribuicao} identificador expressao
									| {escreva} exp
									| {leia} var
									| {avalie} expressao
									| {para} identificador
									| {para_passo} identificador
									| {se} expressao_logica
									| {repita} expressao_logica
									| {enquanto} expressao_logica;