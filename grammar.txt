//Especifica��o da Gram�tica para o Projeto de Compiladores
//Grupo: 	JAIR KLEYTON DA SILVA NUNES
//	 	NATANAEL MACEDO DA SILVA JUNIOR

Package compilador;

Helpers
	todos 			= [' ' + [39 .. 127]];
	minusculas		= ['a' .. 'z'];
	maiusculas 		= ['A' .. 'Z'];
	letra			= minusculas | maiusculas;
	digito			= ['0' .. '9'];
	inteiro			= '-'? digito+;
	real 			= '-'? digito? '.' digito+;
	tab			= 9;
	lf			= 10; // Line Feed
	cr 			= 13; // Carriage Return
	caractere 		= letra | digito | [todos - [cr + lf]];
	eol			= cr | lf | cr lf;	
	comentario_linha	= '//' todos* eol;

States
	normal,
	comment;
	
Tokens
	
	// separadores
	{normal} ponto		= '.';
	{normal} dois_pontos	= ':';
	{normal} virgula 	= ',';
	{normal} ponto_virgula	= ';';
	{normal} barra		= '|';
	{normal} e_parentese 	= '(';
	{normal} d_parentese 	= ')';
	{normal} e_colchete 	= '[';
	{normal} d_colchete 	= ']';
	{normal} e_chave 	= '{';
	{normal} d_chave	= '}';
		
	// operadores
	{normal} mais 		= '+';
	{normal} menos 		= '-';
	{normal} multiplicacao 	= '*';
	{normal} divisao 	= '/';
	{normal} atribuicao	= '<-';
	
	{normal} igual 		= '=';
	{normal} diferente 	= '<>';	
	{normal} maior_q	= '>';
	{normal} menor_q 	= '<';
	{normal} maior_igual	= '>=';
	{normal} menor_igual	= '<=';
		
	{normal} e		= 'e';
	{normal} ou		= 'ou';
	{normal} nao		= 'nao';
	{normal} eou     	= 'eou';
		
	// palavras reservadas
	{normal} programa 	= 'programa';
	{normal} inicio 	= 'inicio';
	{normal} fim 		= 'fim.';
	
	{normal} inteiro	= 'inteiro';
	{normal} real		= 'real';
	{normal} caractere	= 'caractere';
	
	{normal} escreva 	= 'escreva';
	{normal} leia		= 'leia';
	
	{normal} se 		= 'se';
	{normal} entao 		= 'entao';
	{normal} senao 		= 'senao';
	{normal} fim_se		= 'fim se';
	
	{normal} enquanto 	= 'enquanto';
	{normal} faca 		= 'faca';
	{normal} fim_enquanto 	= 'fim enquanto';
	
	{normal} para 		= 'para';
	{normal} de		= 'de';
	{normal} passo		= 'passo';	
	{normal} fim_para 	= 'fim para';
	
	{normal} avalie 	= 'avalie';
	{normal} caso 		= 'caso';
	{normal} fim_avalie	= 'fim avalie';
	
	{normal} repita 	= 'repita';
	{normal} ate 		= 'ate';
	{normal} fim_repita	= 'fim repita';
	{normal} interromper	= 'interromper';
	
	{normal} retorne 	= 'retorne';
	{normal} pacote		= 'pacote';
	{normal} nulo		= 'nulo';
	
	// identificadores
	{normal} id		= (letra | '_')(letra | digito | '_')*;
	{normal} numero		= inteiro;
	{normal} numero_real	= real;
	{normal} string		= ''' caractere* ''';
	{normal} constante	= 'constante';
	{normal} tipo	 	= inteiro | real | caractere;
		
	// espaço em braco e comentarios	
	{normal} blank 		= (' ' | tab | eol )+;
	{normal} comentario	= comentario_linha;
	
	{normal -> comment, comment} comentario_aninhado = '/*';
	{comment} comentario_aninhado_fim = '*/';
	{comment} comentario_aninhado_corpo = [todos - ['*' + '/']]*;
	{comment} estrela = '*';
	{comment} barra_inclinada = '/';	
	{comment} comentario_linha = comentario_linha;
	
Ignored Tokens
	blank,
	comentario,
	comentario_aninhado;
	
Productions
	algoritmo	= programa id inicio declaracao? comandos* fim;
	
	declaracao	= declaracao? tipo dois_pontos variavel ponto_virgula;
	
	var		= {variavel} variavel var_virgula*;
	
	var_virgula	= virgula variavel;
	
	variavel	= {id} id
			| {vetor} id e_colchete numero d_colchete;
	
	valor 		= {numero} numero
			| {numero_real} numero_real
			| {string} string;

	comandos	= {atribuicao} var atribuicao expressao_aritmetica ponto_virgula
			| {leia} leia e_parentese var d_parentese ponto_virgula
			| {escreva} escreva e_parentese expressao_aritmetica d_parentese ponto_virgula
			| {se} se e_parentese expressao_logica d_parentese entao comandos* senao_se? fim_se ponto_virgula 
			| {avalie} avalie e_parentese expressao_logica d_parentese p_caso* senao_p_caso? fim_avalie ponto_virgula
			| {enquanto} enquanto e_parentese expressao_logica d_parentese faca comandos* fim_enquanto ponto_virgula
			| {repita} repita comandos* ate e_parentese expressao_logica d_parentese ponto_virgula
			| {para} para var de [inicio]:numero ate [fim]:numero faca comandos* fim_para ponto_virgula
			| {para_passo} para var de [inicio]:numero passo [passos]:numero ate [fim]:numero faca comandos* fim_para ponto_virgula;
	
	senao_se 	= {senao_se} senao comandos*;
	
	p_caso		= {caso} valor dois_pontos comandos*;
	
	senao_p_caso	= {senao_caso} senao dois_pontos comandos*;
	
	expressao_logica	= {logica} e_parentese expressao_logica d_parentese
				| {e} expressao_relacional e expressao_logica
				| {ou} expressao_relacional ou expressao_logica
				| {eou} expressao_relacional eou expressao_logica
				| {nao} nao? expressao_logica
				| {relacional} expressao_relacional;
	
	expressao_relacional	= {igual} expressao_aritmetica igual expressao_relacional
				| {maior_igual} expressao_aritmetica maior_igual expressao_relacional
				| {menor_igual} expressao_aritmetica menor_igual expressao_relacional
				| {diferente} expressao_aritmetica diferente expressao_relacional 
				| {maior_q} expressao_aritmetica maior_q expressao_relacional
				| {manor_q} expressao_aritmetica menor_q expressao_relacional							
				| {expressoes} expressao_aritmetica;
	
	
	expressao_aritmetica	= {nao} menos expressao_aritmetica
				| {mais} termo mais expressao_aritmetica
				| {menos} termo menos expressao_aritmetica
				| {termo} termo;

	termo 			= {multiplicacao} fator multiplicacao termo
				| {divisao} fator divisao termo
				| {fator} fator;
				
	fator 			= {expressao} e_parentese expressao_aritmetica d_parentese
				| {variavel} variavel
				| {valor} valor;

	/*exp			= expressao exp_virgula*;
	
	exp_virgula		= virgula expressao;
	
	expressao		= {mais} termo mais expressao
				| {menos} termo menos expressao
				| {nao} menos expressao
				| {termo} termo;

	termo 			= {multiplicacao} fator multiplicacao termo
				| {divisao} fator divisao termo
				| {fator} fator;

	fator 			= {expressao} e_parentese expressao d_parentese
				| {variavel} variavel
				| {valor} valor;
						
	expressao_logica	= {logica} e_parentese expressao_logica d_parentese
				| {e} expressao_relacional e expressao_logica
				| {ou} expressao_relacional ou expressao_logica
				| {eou} expressao_relacional eou expressao_logica
				| {nao} nao? expressao_logica
				| {relacional} expressao_relacional;
	
	expressao_relacional	= {maior_igual} expressao maior_igual expressao_relacional
				| {menor_igual} expressao menor_igual expressao_relacional 
				| {diferente} expressao diferente expressao_relacional
				| {maior_q} expressao maior_q expressao_relacional
				| {manor_q} expressao menor_q expressao_relacional
				| {igual} expressao igual expressao_relacional
				| {expressoes} expressao;*/
