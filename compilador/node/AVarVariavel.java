/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AVarVariavel extends PVariavel
{
    private PVar _var_;
    private final LinkedList<PVarVirgula> _varVirgula_ = new LinkedList<PVarVirgula>();

    public AVarVariavel()
    {
        // Constructor
    }

    public AVarVariavel(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") List<?> _varVirgula_)
    {
        // Constructor
        setVar(_var_);

        setVarVirgula(_varVirgula_);

    }

    @Override
    public Object clone()
    {
        return new AVarVariavel(
            cloneNode(this._var_),
            cloneList(this._varVirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarVariavel(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public LinkedList<PVarVirgula> getVarVirgula()
    {
        return this._varVirgula_;
    }

    public void setVarVirgula(List<?> list)
    {
        for(PVarVirgula e : this._varVirgula_)
        {
            e.parent(null);
        }
        this._varVirgula_.clear();

        for(Object obj_e : list)
        {
            PVarVirgula e = (PVarVirgula) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varVirgula_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._varVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._varVirgula_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        for(ListIterator<PVarVirgula> i = this._varVirgula_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarVirgula) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
