/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAlgoritmo node1 = (PAlgoritmo) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAalgoritmo1Algoritmo */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAalgoritmo2Algoritmo */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAalgoritmo3Algoritmo */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAalgoritmo4Algoritmo */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce AIdVariavel */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AVetorVariavel */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AV$Virgula1Var */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AV$Empty1Var */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce ADeclDeclaracao */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ANumeroRealValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AStringValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AEExpressaoLogica */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AOuExpressaoLogica */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AEouExpressaoLogica */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ANaoExpressaoLogica */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce ATermoExpressaoLogica */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce AParenteseLogicaTermoLogico */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce ARelacionalTermoLogico */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce AIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ADiferenteExpressaoRelacional */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AMaiorQExpressaoRelacional */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AMenorQExpressaoRelacional */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AMaiorIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AMenorIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce ASomaExpressaoAritmetica */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce ASubtracaoExpressaoAritmetica */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce AMenosExpressaoAritmetica */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list);
            }
            break;
            case 31: /* reduce ATermoExpressaoAritmetica */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list);
            }
            break;
            case 32: /* reduce AMultiplicacaoTermoAritmetico */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce ADivisaoTermoAritmetico */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list);
            }
            break;
            case 34: /* reduce AFatorTermoAritmetico */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list);
            }
            break;
            case 35: /* reduce AParenteseAritmeticaFatorAritmetico */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list);
            }
            break;
            case 36: /* reduce AVariavelFatorAritmetico */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce AValorFatorAritmetico */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list);
            }
            break;
            case 38: /* reduce ASenaoSeSenaoSe */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list);
            }
            break;
            case 39: /* reduce ACasoPCaso */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce ASenaoCasoSenaoPCaso */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AExpAri$VirgulaAri1Exp */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AExpAri$VirgulaLog1Exp */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AExpAri$Empty1Exp */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AExpLog$VirgulaAri1Exp */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AExpLog$VirgulaLog1Exp */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list);
            }
            break;
            case 46: /* reduce AExpLog$Empty1Exp */
            {
                ArrayList<Object> list = new46();
                push(goTo(15), list);
            }
            break;
            case 47: /* reduce AAtribuicaoComandos */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce ALeiaComandos */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce AEscrevaComandos */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce AAsecomandos1Comandos */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce AAsecomandos2Comandos */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce AAavaliecomandos1Comandos */
            {
                ArrayList<Object> list = new52();
                push(goTo(16), list);
            }
            break;
            case 53: /* reduce AAavaliecomandos2Comandos */
            {
                ArrayList<Object> list = new53();
                push(goTo(16), list);
            }
            break;
            case 54: /* reduce AAavaliecomandos3Comandos */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list);
            }
            break;
            case 55: /* reduce AAavaliecomandos4Comandos */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list);
            }
            break;
            case 56: /* reduce AEnquantoComandos */
            {
                ArrayList<Object> list = new56();
                push(goTo(16), list);
            }
            break;
            case 57: /* reduce ARepitaComandos */
            {
                ArrayList<Object> list = new57();
                push(goTo(16), list);
            }
            break;
            case 58: /* reduce AParaComandos */
            {
                ArrayList<Object> list = new58();
                push(goTo(16), list);
            }
            break;
            case 59: /* reduce AParaPassoComandos */
            {
                ArrayList<Object> list = new59();
                push(goTo(16), list);
            }
            break;
            case 60: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new60();
                push(goTo(17), list);
            }
            break;
            case 61: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new61();
                push(goTo(17), list);
            }
            break;
            case 62: /* reduce ATerminal$Comandos */
            {
                ArrayList<Object> list = new62();
                push(goTo(18), list);
            }
            break;
            case 63: /* reduce ANonTerminal$Comandos */
            {
                ArrayList<Object> list = new63();
                push(goTo(18), list);
            }
            break;
            case 64: /* reduce ATerminal$Var */
            {
                ArrayList<Object> list = new64();
                push(goTo(19), list);
            }
            break;
            case 65: /* reduce ANonTerminal$Var */
            {
                ArrayList<Object> list = new65();
                push(goTo(19), list);
            }
            break;
            case 66: /* reduce ATerminal$Exp */
            {
                ArrayList<Object> list = new66();
                push(goTo(20), list);
            }
            break;
            case 67: /* reduce ANonTerminal$Exp */
            {
                ArrayList<Object> list = new67();
                push(goTo(20), list);
            }
            break;
            case 68: /* reduce ATerminal$PCaso */
            {
                ArrayList<Object> list = new68();
                push(goTo(21), list);
            }
            break;
            case 69: /* reduce ANonTerminal$PCaso */
            {
                ArrayList<Object> list = new69();
                push(goTo(21), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAalgoritmo1Algoritmo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAlgoritmo palgoritmoNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFim tfimNode7;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfimNode7 = (TFim)nodeArrayList4.get(0);

        palgoritmoNode1 = new AAlgoritmo(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode6, tfimNode7);
        }
	nodeList.add(palgoritmoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAalgoritmo2Algoritmo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAlgoritmo palgoritmoNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        palgoritmoNode1 = new AAlgoritmo(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode7, tfimNode8);
        }
	nodeList.add(palgoritmoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAalgoritmo3Algoritmo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAlgoritmo palgoritmoNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TFim tfimNode8;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfimNode8 = (TFim)nodeArrayList5.get(0);

        palgoritmoNode1 = new AAlgoritmo(tprogramaNode2, tidNode3, tinicioNode4, listNode5, listNode7, tfimNode8);
        }
	nodeList.add(palgoritmoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAalgoritmo4Algoritmo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAlgoritmo palgoritmoNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TFim tfimNode9;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfimNode9 = (TFim)nodeArrayList6.get(0);

        palgoritmoNode1 = new AAlgoritmo(tprogramaNode2, tidNode3, tinicioNode4, listNode6, listNode8, tfimNode9);
        }
	nodeList.add(palgoritmoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvariavelNode1 = new AIdVariavel(tidNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVetorVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TId tidNode2;
        TEColchete tecolcheteNode3;
        TNumero tnumeroNode4;
        TDColchete tdcolcheteNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tecolcheteNode3 = (TEColchete)nodeArrayList2.get(0);
        tnumeroNode4 = (TNumero)nodeArrayList3.get(0);
        tdcolcheteNode5 = (TDColchete)nodeArrayList4.get(0);

        pvariavelNode1 = new AVetorVariavel(tidNode2, tecolcheteNode3, tnumeroNode4, tdcolcheteNode5);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AV$Virgula1Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVarVirgula pvarvirgulaNode2;
        PVariavel pvariavelNode5;
        {
            // Block
        PVariavel pvariavelNode3;
        TVirgula tvirgulaNode4;
        pvariavelNode3 = (PVariavel)nodeArrayList1.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList2.get(0);

        pvarvirgulaNode2 = new AVirgulaVarVirgula(pvariavelNode3, tvirgulaNode4);
        }
        pvariavelNode5 = (PVariavel)nodeArrayList3.get(0);

        pvarNode1 = new AVVar(pvarvirgulaNode2, pvariavelNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AV$Empty1Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVarVirgula pvarvirgulaNode2;
        PVariavel pvariavelNode3;
        {
            // Block

        pvarvirgulaNode2 = new AEmptyVarVirgula();
        }
        pvariavelNode3 = (PVariavel)nodeArrayList1.get(0);

        pvarNode1 = new AVVar(pvarvirgulaNode2, pvariavelNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADeclDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TPontoVirgula tpontovirgulaNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ADeclDeclaracao(ptipoNode2, tdoispontosNode3, listNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroValor(tnumeroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANumeroRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroRealValor(tnumerorealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        PExpressaoLogica pexpressaologicaNode3;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList1.get(0);
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AEExpressaoLogica(pexpressaologicaNode2, pexpressaologicaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AOuExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        PExpressaoLogica pexpressaologicaNode3;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList1.get(0);
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AOuExpressaoLogica(pexpressaologicaNode2, pexpressaologicaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEouExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        PExpressaoLogica pexpressaologicaNode3;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList1.get(0);
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AEouExpressaoLogica(pexpressaologicaNode2, pexpressaologicaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANaoExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList2.get(0);

        pexpressaologicaNode1 = new ANaoExpressaoLogica(pexpressaologicaNode2);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ATermoExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        pexpressaologicaNode1 = (PExpressaoLogica)nodeArrayList1.get(0);
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AParenteseLogicaTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList2.get(0);

        pexpressaologicaNode1 = new AParenteseLogicaExpressaoLogica(pexpressaologicaNode2);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ARelacionalTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        pexpressaologicaNode1 = (PExpressaoLogica)nodeArrayList1.get(0);
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AIgualExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ADiferenteExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new ADiferenteExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMaiorQExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AMaiorQExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMenorQExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AMenorQExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMaiorIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AMaiorIgualExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMenorIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AMenorIgualExpressaoLogica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASomaExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaoaritmeticaNode1 = new ASomaExpressaoAritmetica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASubtracaoExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaoaritmeticaNode1 = new ASubtracaoExpressaoAritmetica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMenosExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList2.get(0);

        pexpressaoaritmeticaNode1 = new AMenosExpressaoAritmetica(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATermoExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        pexpressaoaritmeticaNode1 = (PExpressaoAritmetica)nodeArrayList1.get(0);
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMultiplicacaoTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaoaritmeticaNode1 = new AMultiplicacaoExpressaoAritmetica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ADivisaoTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpressaoaritmeticaNode1 = new ADivisaoExpressaoAritmetica(pexpressaoaritmeticaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFatorTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        pexpressaoaritmeticaNode1 = (PExpressaoAritmetica)nodeArrayList1.get(0);
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AParenteseAritmeticaFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList2.get(0);

        pexpressaoaritmeticaNode1 = new AParenteseAritmeticaExpressaoAritmetica(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AVariavelFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        pexpressaoaritmeticaNode1 = new AVariavelExpressaoAritmetica(pvariavelNode2);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AValorFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoAritmetica pexpressaoaritmeticaNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpressaoaritmeticaNode1 = new AValorExpressaoAritmetica(pvalorNode2);
        }
	nodeList.add(pexpressaoaritmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASenaoSeSenaoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoSe psenaoseNode1;
        {
            // Block
        TSenao tsenaoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        psenaoseNode1 = new ASenaoSeSenaoSe(tsenaoNode2, listNode4);
        }
	nodeList.add(psenaoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ACasoPCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPCaso ppcasoNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppcasoNode1 = new ACasoPCaso(tcasoNode2, pvalorNode3, tdoispontosNode4, listNode6);
        }
	nodeList.add(ppcasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASenaoCasoSenaoPCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoPCaso psenaopcasoNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psenaopcasoNode1 = new ASenaoCasoSenaoPCaso(tsenaoNode2, tdoispontosNode3, listNode5);
        }
	nodeList.add(psenaopcasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpAri$VirgulaAri1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode5;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        TVirgula tvirgulaNode4;
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode2 = new AVirgulaAriExpVirgula(pexpressaoaritmeticaNode3, tvirgulaNode4);
        }
        pexpressaoaritmeticaNode5 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpNode1 = new AExpAriExp(pexpvirgulaNode2, pexpressaoaritmeticaNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpAri$VirgulaLog1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode5;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode3;
        TVirgula tvirgulaNode4;
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList1.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode2 = new AVirgulaLogExpVirgula(pexpressaologicaNode3, tvirgulaNode4);
        }
        pexpressaoaritmeticaNode5 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pexpNode1 = new AExpAriExp(pexpvirgulaNode2, pexpressaoaritmeticaNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpAri$Empty1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        {
            // Block

        pexpvirgulaNode2 = new AEmptyExpVirgula();
        }
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList1.get(0);

        pexpNode1 = new AExpAriExp(pexpvirgulaNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpLog$VirgulaAri1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoLogica pexpressaologicaNode5;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        TVirgula tvirgulaNode4;
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList1.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode2 = new AVirgulaAriExpVirgula(pexpressaoaritmeticaNode3, tvirgulaNode4);
        }
        pexpressaologicaNode5 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpNode1 = new AExpLogExp(pexpvirgulaNode2, pexpressaologicaNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpLog$VirgulaLog1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoLogica pexpressaologicaNode5;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode3;
        TVirgula tvirgulaNode4;
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList1.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode2 = new AVirgulaLogExpVirgula(pexpressaologicaNode3, tvirgulaNode4);
        }
        pexpressaologicaNode5 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpNode1 = new AExpLogExp(pexpvirgulaNode2, pexpressaologicaNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpLog$Empty1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        PExpressaoLogica pexpressaologicaNode3;
        {
            // Block

        pexpvirgulaNode2 = new AEmptyExpVirgula();
        }
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLogExp(pexpvirgulaNode2, pexpressaologicaNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAtribuicaoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        PExpressaoAritmetica pexpressaoaritmeticaNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        pexpressaoaritmeticaNode3 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pcomandosNode1 = new AAtribuicaoComandos(pvariavelNode2, pexpressaoaritmeticaNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ALeiaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandosNode1 = new ALeiaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEscrevaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandosNode1 = new AEscrevaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAsecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new ASeComandos(pexpressaologicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAsecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new ASeComandos(pexpressaologicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAavaliecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAavaliecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAavaliecomandos3Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAavaliecomandos4Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoAritmetica pexpressaoaritmeticaNode2;
        pexpressaoaritmeticaNode2 = (PExpressaoAritmetica)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpressaoaritmeticaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AEnquantoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new AEnquantoComandos(pexpressaologicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ARepitaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList5.get(0);

        pcomandosNode1 = new ARepitaComandos(pexpressaologicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AParaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        TNumero tnumeroNode3;
        TNumero tnumeroNode4;
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        tnumeroNode3 = (TNumero)nodeArrayList4.get(0);
        tnumeroNode4 = (TNumero)nodeArrayList6.get(0);

        pcomandosNode1 = new AParaComandos(pvariavelNode2, tnumeroNode3, tnumeroNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AParaPassoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        TNumero tnumeroNode3;
        TNumero tnumeroNode4;
        TNumero tnumeroNode5;
        pvariavelNode2 = (PVariavel)nodeArrayList2.get(0);
        tnumeroNode3 = (TNumero)nodeArrayList4.get(0);
        tnumeroNode4 = (TNumero)nodeArrayList6.get(0);
        tnumeroNode5 = (TNumero)nodeArrayList8.get(0);

        pcomandosNode1 = new AParaPassoComandos(pvariavelNode2, tnumeroNode3, tnumeroNode4, tnumeroNode5);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandos pcomandosNode1;
        pcomandosNode1 = (PComandos)nodeArrayList1.get(0);
	if(pcomandosNode1 != null)
	{
	  listNode2.add(pcomandosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandos pcomandosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosNode2 = (PComandos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosNode2 != null)
	{
	  listNode3.add(pcomandosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$PCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPCaso ppcasoNode1;
        ppcasoNode1 = (PPCaso)nodeArrayList1.get(0);
	if(ppcasoNode1 != null)
	{
	  listNode2.add(ppcasoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$PCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPCaso ppcasoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppcasoNode2 = (PPCaso)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppcasoNode2 != null)
	{
	  listNode3.add(ppcasoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {26, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {61, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {27, SHIFT, 4}, },
			{{-1, ERROR, 4}, {28, SHIFT, 5}, {29, SHIFT, 6}, {30, SHIFT, 7}, {31, SHIFT, 8}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 9}, {4, SHIFT, 23}, },
			{{-1, ERROR, 10}, {4, SHIFT, 24}, },
			{{-1, ERROR, 11}, {4, SHIFT, 25}, },
			{{-1, ERROR, 12}, {4, SHIFT, 26}, },
			{{-1, ERROR, 13}, {51, SHIFT, 16}, },
			{{-1, ERROR, 14}, {4, SHIFT, 28}, },
			{{-1, ERROR, 15}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 7}, {6, SHIFT, 30}, },
			{{-1, ERROR, 17}, {1, SHIFT, 31}, },
			{{-1, ERROR, 18}, {15, SHIFT, 32}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 21}, {28, SHIFT, 33}, {29, SHIFT, 6}, {30, SHIFT, 7}, {31, SHIFT, 8}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 22}, {28, SHIFT, 36}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 23}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 24}, {51, SHIFT, 16}, },
			{{-1, ERROR, 25}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 26}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 27}, {42, SHIFT, 60}, },
			{{-1, ERROR, 28}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 29}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {49, SHIFT, 63}, {51, SHIFT, 16}, },
			{{-1, ERROR, 30}, {52, SHIFT, 64}, },
			{{-1, ERROR, 31}, {51, SHIFT, 16}, },
			{{-1, ERROR, 32}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 35}, {28, SHIFT, 67}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 38}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 39}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 40}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 46}, {2, SHIFT, 72}, },
			{{-1, REDUCE, 19}, {22, SHIFT, 73}, {23, SHIFT, 74}, {25, SHIFT, 75}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 43}, {2, SHIFT, 76}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, REDUCE, 31}, {11, SHIFT, 83}, {12, SHIFT, 84}, },
			{{-1, REDUCE, 34}, {13, SHIFT, 85}, {14, SHIFT, 86}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 53}, {4, SHIFT, 38}, {5, SHIFT, 87}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, REDUCE, 10}, {2, SHIFT, 89}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 56}, {5, SHIFT, 90}, {51, SHIFT, 16}, },
			{{-1, ERROR, 57}, {5, SHIFT, 92}, },
			{{-1, ERROR, 58}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, ERROR, 59}, {5, SHIFT, 93}, },
			{{-1, ERROR, 60}, {52, SHIFT, 94}, },
			{{-1, ERROR, 61}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 62}, {5, SHIFT, 96}, },
			{{-1, ERROR, 63}, {4, SHIFT, 97}, },
			{{-1, ERROR, 64}, {7, SHIFT, 98}, },
			{{-1, ERROR, 65}, {3, SHIFT, 99}, {51, SHIFT, 16}, },
			{{-1, ERROR, 66}, {3, SHIFT, 100}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 68}, {5, SHIFT, 101}, },
			{{-1, ERROR, 69}, {5, SHIFT, 102}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 72}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 73}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 74}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 75}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 76}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 77}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 78}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 79}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 80}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 81}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 82}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 83}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 84}, {4, SHIFT, 61}, {10, SHIFT, 39}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 85}, {4, SHIFT, 61}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 86}, {4, SHIFT, 61}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 87}, {3, SHIFT, 120}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 89}, {51, SHIFT, 16}, },
			{{-1, ERROR, 90}, {3, SHIFT, 122}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 92}, {35, SHIFT, 123}, },
			{{-1, ERROR, 93}, {39, SHIFT, 124}, },
			{{-1, ERROR, 94}, {43, SHIFT, 125}, {49, SHIFT, 126}, },
			{{-1, ERROR, 95}, {5, SHIFT, 102}, },
			{{-1, ERROR, 96}, {36, SHIFT, 127}, {46, SHIFT, 128}, {47, SHIFT, 129}, },
			{{-1, ERROR, 97}, {4, SHIFT, 38}, {10, SHIFT, 39}, {24, SHIFT, 40}, {51, SHIFT, 16}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 42}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 41}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 123}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 124}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 125}, {52, SHIFT, 136}, },
			{{-1, ERROR, 126}, {52, SHIFT, 137}, },
			{{-1, ERROR, 127}, {1, SHIFT, 138}, },
			{{-1, ERROR, 128}, {52, SHIFT, 41}, {53, SHIFT, 42}, {54, SHIFT, 43}, },
			{{-1, ERROR, 129}, {3, SHIFT, 140}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 131}, {47, SHIFT, 141}, },
			{{-1, ERROR, 132}, {36, SHIFT, 127}, {46, SHIFT, 128}, {47, SHIFT, 142}, },
			{{-1, ERROR, 133}, {5, SHIFT, 145}, },
			{{-1, ERROR, 134}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {36, SHIFT, 146}, {37, SHIFT, 147}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 135}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {40, SHIFT, 149}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 136}, {49, SHIFT, 150}, },
			{{-1, ERROR, 137}, {39, SHIFT, 151}, },
			{{-1, ERROR, 138}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 139}, {1, SHIFT, 153}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 141}, {3, SHIFT, 154}, },
			{{-1, ERROR, 142}, {3, SHIFT, 155}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 144}, {47, SHIFT, 156}, },
			{{-1, ERROR, 145}, {3, SHIFT, 157}, },
			{{-1, ERROR, 146}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 147}, {3, SHIFT, 159}, },
			{{-1, ERROR, 148}, {37, SHIFT, 160}, },
			{{-1, ERROR, 149}, {3, SHIFT, 161}, },
			{{-1, ERROR, 150}, {52, SHIFT, 162}, },
			{{-1, ERROR, 151}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 40}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 153}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 156}, {3, SHIFT, 165}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 38}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 160}, {3, SHIFT, 166}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 162}, {39, SHIFT, 167}, },
			{{-1, ERROR, 163}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 168}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 39}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 167}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, ERROR, 168}, {3, SHIFT, 170}, },
			{{-1, ERROR, 169}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {38, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 171}, {45, SHIFT, 14}, {48, SHIFT, 15}, {51, SHIFT, 16}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 171}, {3, SHIFT, 172}, },
			{{-1, REDUCE, 59}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 17}, },
			{{-1, 44}, {4, 18}, {13, 27}, {15, 18}, {21, 18}, {22, 18}, {24, 54}, {29, 18}, {31, 54}, {35, 18}, {56, 54}, {65, 54}, {89, 121}, {123, 18}, {124, 18}, {134, 18}, {135, 18}, {138, 18}, {146, 18}, {151, 18}, {152, 18}, {153, 18}, {158, 18}, {163, 18}, {164, 18}, {167, 18}, {169, 18}, },
			{{-1, 55}, {56, 91}, {65, 91}, },
			{{-1, 19}, {21, 34}, },
			{{-1, 45}, {128, 139}, },
			{{-1, 46}, {25, 57}, {26, 59}, {38, 68}, {40, 71}, {72, 103}, {73, 105}, {74, 106}, {75, 107}, {76, 108}, {97, 133}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 58}, {23, 49}, {28, 62}, {32, 66}, {38, 69}, {39, 70}, {53, 49}, {61, 95}, {72, 104}, {76, 109}, {77, 110}, {78, 111}, {79, 112}, {80, 113}, {81, 114}, {82, 115}, {83, 116}, {84, 117}, },
			{{-1, 50}, {85, 118}, {86, 119}, },
			{{-1, 51}, },
			{{-1, 148}, },
			{{-1, 130}, {132, 143}, },
			{{-1, 131}, {132, 144}, },
			{{-1, 52}, {53, 88}, },
			{{-1, 20}, {22, 37}, {29, 37}, {35, 37}, {134, 37}, {135, 37}, {152, 37}, {158, 37}, {163, 37}, {164, 37}, {169, 37}, },
			{{-1, 21}, },
			{{-1, 22}, {15, 29}, {21, 35}, {123, 134}, {124, 135}, {138, 152}, {146, 158}, {151, 163}, {153, 164}, {167, 169}, },
			{{-1, 56}, {31, 65}, },
			{{-1, 53}, },
			{{-1, 132}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'inteiro', 'real', 'caractere', 'escreva', 'leia', 'se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'escreva', 'leia', 'se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: ',', ';', '(', ')', '[', '-', '+', '-', '*', '/', '<-', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', 'de', id, numero, numero real, string",
			"expecting: '<-'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'senao', 'fim se', 'enquanto', 'fim enquanto', 'para', 'fim para', 'avalie', 'caso', 'fim avalie', 'repita', 'ate', id",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: '(', '-', 'nao', id, numero, numero real, string",
			"expecting: 'de'",
			"expecting: '(', '-', id, numero, numero real, string",
			"expecting: 'escreva', 'leia', 'se', 'enquanto', 'para', 'avalie', 'repita', 'ate', id",
			"expecting: numero",
			"expecting: ':', ',', ';', '(', ')', '-', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', id, numero, numero real, string",
			"expecting: ',', ';', '(', ')', '-', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', id, numero, numero real, string",
			"expecting: ',', '(', ')', '-', 'nao', id, numero, numero real, string",
			"expecting: ',', '(', ')', '-', 'e', 'ou', 'nao', 'eou', id, numero, numero real, string",
			"expecting: ',', '(', ')', '-', '=', '<>', '>', '<', '>=', '<=', 'nao', id, numero, numero real, string",
			"expecting: ',', ';', '(', ')', '-', '+', '-', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', id, numero, numero real, string",
			"expecting: '(', ')', '-', 'nao', id, numero, numero real, string",
			"expecting: ',', ';', ')', id",
			"expecting: ';', ')', id",
			"expecting: ')', id",
			"expecting: ')'",
			"expecting: '=', '<>', '>', '<', '>=', '<='",
			"expecting: ']'",
			"expecting: ';', id",
			"expecting: ';'",
			"expecting: ')', '=', '<>', '>', '<', '>=', '<='",
			"expecting: ',', ';', '(', ')', '-', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', id, numero, numero real, string",
			"expecting: '(', id, numero, numero real, string",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'passo', 'ate'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: ',', ';', '(', ')', '-', '+', '-', '*', '/', '<-', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'nao', 'eou', 'de', id, numero, numero real, string",
			"expecting: '(', ')', '-', '=', '<>', '>', '<', '>=', '<=', 'nao', id, numero, numero real, string",
			"expecting: numero, numero real, string",
			"expecting: 'fim avalie'",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'fim se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'escreva', 'leia', 'se', 'enquanto', 'fim enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'ate'",
			"expecting: 'fim se'",
			"expecting: 'escreva', 'leia', 'se', 'enquanto', 'para', 'avalie', 'fim avalie', 'repita', id",
			"expecting: 'escreva', 'leia', 'se', 'fim se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'escreva', 'leia', 'se', 'enquanto', 'para', 'fim para', 'avalie', 'repita', id",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'enquanto', 'para', 'avalie', 'caso', 'fim avalie', 'repita', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 5, 6, 6, 6, 6, 1, 6, 7, 8, 5, 9, 4, 10, 4, 11, 12, 1, 12, 12, 13, 14, 15, 16, 1, 14, 2, 4, 11, 2, 10, 12, 14, 12, 17, 17, 17, 18, 18, 19, 20, 20, 21, 22, 18, 23, 23, 24, 25, 26, 27, 28, 27, 16, 14, 27, 6, 29, 30, 31, 2, 27, 32, 33, 19, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 34, 34, 31, 23, 1, 31, 25, 35, 36, 37, 27, 38, 12, 39, 4, 10, 20, 18, 23, 40, 19, 19, 19, 23, 40, 20, 20, 20, 20, 20, 20, 33, 33, 22, 22, 10, 25, 10, 7, 7, 16, 16, 5, 41, 31, 38, 42, 38, 27, 43, 44, 45, 36, 7, 5, 10, 31, 31, 38, 42, 31, 7, 31, 46, 31, 16, 7, 47, 7, 10, 10, 31, 10, 48, 10, 31, 10, 36, 49, 50, 10, 10, 7, 31, 49, 10, 31, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
