/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAFatorExpr(AFatorExpr node)
    {
        defaultIn(node);
    }

    public void outAFatorExpr(AFatorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExpr(AFatorExpr node)
    {
        inAFatorExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExpr(node);
    }

    public void inAMaisExpr(AMaisExpr node)
    {
        defaultIn(node);
    }

    public void outAMaisExpr(AMaisExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpr(AMaisExpr node)
    {
        inAMaisExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMaisExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        inAMultiplicacaoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultiplicacaoFator(node);
    }

    public void inADivisaoFator(ADivisaoFator node)
    {
        defaultIn(node);
    }

    public void outADivisaoFator(ADivisaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoFator(ADivisaoFator node)
    {
        inADivisaoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivisaoFator(node);
    }

    public void inARestoFator(ARestoFator node)
    {
        defaultIn(node);
    }

    public void outARestoFator(ARestoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestoFator(ARestoFator node)
    {
        inARestoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getResto() != null)
        {
            node.getResto().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outARestoFator(node);
    }

    public void inAInteiroTermo(AInteiroTermo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTermo(AInteiroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTermo(AInteiroTermo node)
    {
        inAInteiroTermo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTermo(node);
    }

    public void inAExprTermo(AExprTermo node)
    {
        defaultIn(node);
    }

    public void outAExprTermo(AExprTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTermo(AExprTermo node)
    {
        inAExprTermo(node);
        if(node.getEParentese() != null)
        {
            node.getEParentese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDParentese() != null)
        {
            node.getDParentese().apply(this);
        }
        outAExprTermo(node);
    }
}
